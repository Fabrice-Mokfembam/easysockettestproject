import { WebSocket } from 'ws';
import { IncomingMessage } from 'http';
interface WebSocketMessage {
    type: string;
    timestamp?: number;
    originalTimestamp?: number;
    content?: string;
    user?: string;
    [key: string]: any;
}
declare class MyWebSocketServer {
    private wss;
    private connectedClients;
    private port;
    private path;
    private onClientConnectCallback?;
    private onClientDisconnectCallback?;
    constructor(port?: number, path?: string);
    /**
     * Registers a callback to be called whenever a new client connects.
     * @param {(client: WebSocket, req: IncomingMessage) => void} callback
     */
    onClientConnect(callback: (client: WebSocket, req: IncomingMessage) => void): void;
    /**
     * Registers a callback to be called whenever a client disconnects.
     * @param {(client: WebSocket, code: number, reason: Buffer) => void} callback
     */
    onClientDisconnect(callback: (client: WebSocket, code: number, reason: Buffer) => void): void;
    /**
     * Starts the WebSocket server.
     * @returns {Promise<void>}
     */
    start(): Promise<void>;
    stop(): Promise<void>;
    private handleIncomingMessage;
    /**
     * Sends a structured message to a specific client.
     * @param {WebSocket} ws
     * @param {WebSocketMessage} message
     */
    sendMessage(ws: WebSocket, message: WebSocketMessage): void;
    /**
     * Broadcasts a structured message to all currently connected clients.
     * @param {WebSocketMessage} message
     */
    broadcastMessage(message: WebSocketMessage): void;
    /**
     * Broadcast a message to all clients except the specified one.
     * @param {WebSocketMessage} message
     * @param {WebSocket} excludeClient
     */
    broadcastExcept(message: WebSocketMessage, excludeClient: WebSocket): void;
    /**
     * Get the number of currently connected clients.
     * @returns {number} The count of connected clients.
     */
    getConnectedClientCount(): number;
}
export default MyWebSocketServer;
